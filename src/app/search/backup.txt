"use client";

import { useState, useEffect } from "react";
import { DiscoverPosterCard } from "@/app/discover/DiscoverPosterCard";
import { useQuery } from "@tanstack/react-query";
import { Chip, Pagination, Skeleton } from "@nextui-org/react";
import { useSearchParams } from "next/navigation";
import { useRouter } from "next-nprogress-bar";
import { SkeletonDiscoverPosterCard } from "@/app/discover/SkeletonDiscoverPosterCard";
import { tmdb } from "@/api/tmdb";
import SearchInput from "@/components/ui/input/SearchInput";
import clsx from "clsx";
import { useDebouncedValue, useLocalStorage } from "@mantine/hooks";
import { AnimatePresence, motion } from "framer-motion";

export default function SearchList({ query }: { query?: string }) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const initialPage = Number(searchParams.get("page")) || 1;
  const initialQuery = searchParams.get("query") || "";
  const [page, setPage] = useState<number>(initialPage);
  const [searchInput, setSearchInput] = useState(initialQuery);
  const [isSearchTriggered, setIsSearchTriggered] = useState(false);
  const [debouncedSearchQuery] = useDebouncedValue(searchInput.trim(), 1000);

  const [searchHistories, setSearchHistories] = useLocalStorage<string[]>({
    key: "search-histories",
    defaultValue: [],
  });

  const { data, isPending } = useQuery({
    queryFn: () => tmdb.search.movies({ query: debouncedSearchQuery, page: page, include_adult: true }),
    queryKey: ["search-movie", page, debouncedSearchQuery],
  });

  if (page > 500 || page < 0) {
    setPage(1);
  }

  const totalResults = data?.total_results ?? 0;
  const totalPages = data?.total_pages ?? 0;

  const handlePageChange = (newPage: number) => {
    setPage(newPage);
    router.push(`?query=${debouncedSearchQuery}&page=${newPage}`);
  };

  useEffect(() => {
    if (debouncedSearchQuery === "") {
      setIsSearchTriggered(false);
      router.push("/search");
    } else if (debouncedSearchQuery) {
      setIsSearchTriggered(true);
      setPage(1);
      router.push(`?query=${debouncedSearchQuery}`);
      if (searchHistories.length !== 0 && !searchHistories.includes(debouncedSearchQuery)) {
        setSearchHistories([...searchHistories, debouncedSearchQuery].sort());
      }
    }
  }, [debouncedSearchQuery, router]);

  // useEffect(() => {
  //   window.scrollTo({ top: 0, behavior: "smooth" });
  // }, [page]);

  return (
    <div className="flex flex-col items-center gap-8">
      <AnimatePresence>
        <div className={clsx("flex w-full max-w-xl flex-col justify-center gap-5 text-center", !isSearchTriggered && "absolute-center")}>
          <motion.div
            layout
            initial={{ opacity: 0, scale: 0.7 }}
            exit={{ opacity: 0, scale: 0.7 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3 }}
          >
            <SearchInput
              placeholder="Search your favorite movies..."
              isLoading={isPending && isSearchTriggered}
              autoFocus
              value={searchInput}
              onChange={(e: any) => setSearchInput(e.target.value)}
            />
          </motion.div>
          <div className="flex flex-wrap justify-center gap-2">
            {searchHistories.map((history, index) => (
              <motion.div
                layout
                key={index}
                initial={{ opacity: 0, scale: 0.5 }}
                exit={{ opacity: 0, scale: 0.5 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.3 }}
              >
                <Chip
                  as="button"
                  key={index}
                  onClick={() => setSearchInput(history)}
                  onClose={() => setSearchHistories(searchHistories.filter((currentHistory) => currentHistory !== history))}
                  variant="flat"
                >
                  {history}
                </Chip>
              </motion.div>
            ))}
          </div>
        </div>
      </AnimatePresence>

      {isSearchTriggered && (
        <>
          {isPending ? (
            <>
              <Skeleton className="h-8 w-[50vh] rounded-full" />
              <div className="movie-grid">
                {Array.from({ length: 20 }, (_, index) => (
                  <SkeletonDiscoverPosterCard key={index} />
                ))}
              </div>
            </>
          ) : (
            <>
              <h4 className="text-xl">
                Found <span className="font-bold text-primary">{totalResults.toLocaleString()}</span> movies with query{" "}
                <span className="font-bold text-warning">"{debouncedSearchQuery}"</span>
              </h4>
              <div className="movie-grid">{data?.results.map((movie: any) => <DiscoverPosterCard key={movie.id} movie={movie} />)}</div>
              <Pagination showControls total={totalPages} initialPage={page} onChange={handlePageChange} />
            </>
          )}
        </>
      )}
    </div>
  );
}
